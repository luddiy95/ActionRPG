
・画像を.ddsに変換したものを正しく表示させる。
↓
pixel formatをA8R8G8B8(アルファチャネル、赤、緑、青)にするok

・フィールドを表示
ハードウェアがやってくれそう
↓
ハードウェアはポンコツでした

1マス1マス回転させるより全体を回転させて切る
一本一本のベクタを回転で出して直線の対応関数を作る→回転する必要なし(tanで求まる)ok
yは等分なのでxがすぐ出るok
視点移動を考えるとマスの座標に行列をかけるのでマスの四方の座標は出した方がいいok
最初に四方の座標出したら移動は行列をかけるだけなのでmLinesは消していいok

・SAFE_DELETE(mLines)

・奥に行くほど小さくなる方がいいok

・横にいくほど幅が小さくなるほうがいい→角度を小さくすることで改善ok

・フィールド視点移動できるようにする。ok

・playerがフィールド上を動けるようにするok

・playerが動けるマスと動けないマスok

・joystick
どの方向にも動けるのは30フレームごと
動いたらbuttonCountは0に
同時操作は受け付けない(buttonCountが0でないときは操作を受け付けない)
↓
操作自体を30フレームごとにしか受け付けなければよいok

・自HP表示ok

・敵を作る
メモ読み取りで敵の種類や最初の位置を取得ok
敵の種類を派生クラスにするok
bird：playerの真正面に一定時間いたら攻撃してくる。ok
	真正面にいない場合は移動するok

・ポインタ渡しでなくconst参照渡しok

・衝突判定
光線の画像を小さくするok
光線を発した敵自体が撃破されても光線自体が残るので光線を敵のメンバにするのではなく
光線用のクラスを用意するべき
↓
敵本体のクラスと光線のクラスをひとまとめとして敵のクラスにしたok
光線がmaxでていたら発射の動作をしないok

光線との衝突判定はplayerのHPを操作するのでplayerのメンバのほうがいい
敵の攻撃配列をmPlayerに渡す方がいい(攻撃は何個かあるから)
↓
攻撃は複数個あるので敵にmPlayerのポインタを渡した方がいいok

・攻撃や敵がplayerの後ろなら隠れるがplayerの前なら隠れない
↓
playerの敵の描画がただ前後しているだけではダメok

・・光線とplayerとの衝突判定でy方向をplayerがいるマスの上と下にすると
奥のマスほど高さが小さいので光線が縦2マスにまたがってしまう
↓
上に避けているのに当たってしまう
↓
光線の縦のマスの座標は不変なのでマスの座標を持っておくok

・亀がどのくらい奥にいるかで進む速度が違う
↓
亀が次に立つ場所との距離を出して一定フレームで移動するok

・亀がエリア奪う(playerが前にいたらplayerにダメージでエリアは奪えない)ok

・fieldをシングルトンにするok

・亀がエリアを奪うとき前にplayerがいたらplayerにダメージでエリアは奪えない
(playerがくらうときだけ亀のポーズがおかしい)ok

・パネルが落ちるときの高さを統一するok

・敵同士ぶつかるときの挙動ok

・敵は奥から順に描画
攻撃も奥から順に描画
↓
playerも敵も攻撃も奥から順に描画するので描画の際に全部のy座標を得て描画
↓
同じy座標の描画順：enemy, player, attack
↓
enemyは1マスに1体しかいないのでenemyはfieldWidth * fieldHeightの2次元配列に格納できる
(Fieldクラスにplayer、enemyの存在情報を持たせる)ok

・attackをフラグにするok

・敵の攻撃を最後に描画(攻撃も奥から描画)ok

・攻撃の合図を消す挙動(マスがオレンジになる)をする敵が一番最後にupdateされたら
別の敵が合図をしているときおかしい
↓
マスごとに合図があるか確認してあったら合図
↓
毎フレームごとにattackならflagをたて、毎フレームの最後にflagを下げるok

・第一次動作確認
field・・・ok
player・・・ok
Bird・・・(多分)ok
Turtle・・・(多分)ok

・ラマy方向に進むときは斜めに進むのでdx = 0ではダメok

・ラマ後ろ方向に進んでるok

・熊update
進んでるときは敵とぶつかるまで進む→跳ね返ったら攻撃
playerのエリアにぶつかったら必ず攻撃
奥も手前もplayerのエリアだったらひたすら攻撃し続ける
攻撃カウント1→左向く→攻撃終わる→mFirstStopCount = 0→縦向く→インターバル(止まる)→動く(mFirstStopCount == moveAreaFrame)ok

・熊の攻撃
mAttackがtrueになる→mSensorがnewされる→mDirectionXがLEFTになる→mImageStatusが0になる
↓
1.センサーがplayerにぶつかる→attackCollisionでmLaserがnewされる→vanishがtrueになる→Bear->updateでmSensorがdeleteされる
2.センサーが3回とも外れる→vanishがtrueになる→Bear->updateでmSensorがdeleteされる→mBody->attackEnd()でattack = falseになりmBodyのupdateが再開
↓
(1の場合)ok


・熊の攻撃
mAttackCountが0でなくなったらmSensorでplayerを感知したらmLaserをnewする
mSensorとplayerとの衝突判定
mSensorのdraw
センサー：playerにあたるか３回放出して諦めたら消える(この間mImageStatus = 2)
レーザー：playerにあたるか一定時間放射したら消える(この間mImageStatus = 1)
↓
センサーがあればmImageStatus = 2
レーザーがあればmImageStatus = 1
センサーが自動で消える→センサー消して攻撃終わり、センサーがplayerに当たる→センサー消してレーザー生成←ここからok

・文字入力を画素単位で行えるようにするok

・時間停止(精神集中)
ある一定のラインまでいくと精神集中できる。→増えるゲージを点滅させるok

精神集中になったらフィールド上のupdateをやめてstatusのゲージとselectのみ←ここから☆ok

一定ラインを超えた分だけ時間がもらえる。→減るゲージも点滅させるok

・タロット集を作る(最低5種類)ok

・selectはstatusの子にしたほうがいいのでは←☆ここからok
(tarotはplayerなどで使うから独立にしたほうがいい)

・selectのupdateはstatusのupdateに組み込まれる
selectをupdateするのはmode == SELECTのときのみ
drawも同様ok

・タロットは同じ色同士は選べる(タロットは5色に分かれている)ok
同じ種類のタロットは選べる
同じ種類で選んでいたら同じ色選択はできず、同じ色で選んでいたら同じ種類選択はできない
黒のタロットを3枚連続で使うとrobが1増える
白のタロットを3枚連続で使うとHPが20回復する
初期デッキでは黒と白のタロットを少なくするok

・タロットの画像、タロットの簡易画像ok

・select画面で未選択のタロットは暗転している。ok
タロットを選択したら明るくなり一番左に移動(一番左と入れ替わる)ok

・バトル中も選択したタロットを表示(タロットの簡易表示は作らない)ok
↓
選択できるタロットの性質
(同じタロットは選択できる)
(同じ記号は選択できる)ok
↓
statusで選択したタロットたちはplayerに渡す。
→デッキ情報はplayerがもちstatusではそれをいちいち渡し変更したりするだけ。ok
↓
選択したタロットの先頭に枠作る(使えるときだけなので選択してなかったりタロットを
使い切ったら描かない。また、戦闘中のときしか描かない)ok
↓
戦闘中に使わなかったタロットは消えるok
↓
タロットを戦闘中に使ったら使った先頭のタロットは消え、デッキから最後尾に新しいタロットが
入り、全体的に右にズレる。ok
↓
タロットの残りが6個以下になったときの対処ok

・selectからバトルに戻るボタンok

・カーソルはバトルに戻ったら先頭に戻る
残りのタロットが一枚もなかったらカーソルはない
(タロットが合計で29枚になっている→30枚だったが描画されていないだけだった)ok

・lamaとturtleが同時に同じエリアを変更しようとしたとき
(多分)一方がエリアをchangeして他方がもう一度changeするので赤に戻ってしまう。ok

・bearのセンサーをもっと小さく、laserが当たったとき一瞬で消えないok

・敵のHP表示させる
HP表示は下だと手前の他のenemyに隠れてしまうので上に描画するok

・選択画面でも画面の視点移動ができるようにするok

・playerの攻撃
更新や描画の度にタロットの種類を確かめるのはタロットの種類が増えたときにコストがかかる
→playerの攻撃を表す基底クラスを作りそれぞれのタロットに合わせた派生クラスを作るok

・BirdのBeamを一つのBeamが消えるまで新しいBeamができないようにするok

・laserの攻撃で一度当たったenemyにはそれ以上衝突判定にならないようにする
→enemyのindexをもらって一度当たったか判断ok

・playerのlaserがplayerの上に来ないようにok

・laserがタテマスに平行になるようにok

・デッキを全てlaserにして動作確認ok

・laser2ok

・canonは向いてる方向へ発射ok

・n押しても発射しないときある(タロットは減るのに)
→上に打つとき下にenemyがいたら衝突判定されてしまうことがあるためok

・リカバリーok

・joystick ok

・rob ok

・enemyの数によって更新回数が違うok

・turtleの目の前が急にplayerのマスになったときok

・lamaがenemyのereaを前にしてとまどう
→デリートされた敵を認識してしまっているok

・時間あればソード

・Fieldのdestroyがおかしい

・playerの絵かえるok

・説明とステージセレクトで"×で戻る"をかくok


・タロットの説明

・player攻撃くらったときののけぞり

・デリートok

・エリア奪うときのエリアの透過

・鳥の光線、奥にいくほど小さくなる

・影

・背景

・画面上にenemyやplayerやマスの略図をかく

・フィールドの色(真ん中は共通の色で枠だけ別の色にしたり)ok

・Gameシーケンスを探索シーケンスとバトルシーケンスの二つに分ける


・敵
1.鳥
画像としてのサイズ48 * 36
まっすぐに光線を発射
playerを追いかけて縦移動
2.亀
画像としてのサイズ52 * 32
目の前のマスを1マス奪っていく
前にしか進まない
3.ラマ
縦方向にも向き転換する
適当に動いて目の前のマスを奪っていく
playerのエリアや穴、壁にぶつかったら方向転換
4.熊
縦方向にしか動かない(縦に動こうとするたびに向き転換する)
縦に動いたら左を向き縦横方向にセンサーを出し引っかかったら縦横にレーザーを発射
センサーを複数回出し引っかからなかったら方向転換
レーザーを発射できたらまた複数回センサーを出す→上と同じ






















・眞 ヨナ





